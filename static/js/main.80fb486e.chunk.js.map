{"version":3,"sources":["Services/fetch.js","Components/FormJoke.js","Components/Joke.js","Pages/JokesPage.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["getRandomJoke","a","fetch","then","response","json","searchByText","text","searchByCategory","getCategories","FormJoke","props","useState","setText","mode","setMode","categories","setCategories","search","setJoke","console","log","useEffect","init","m","onChange","e","target","value","placeholder","map","element","colorScheme","onClick","Joke","src","joke","icon_url","JokesPage","style","fontSize","result","elemento","App","theme","p","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80fb486e.chunk.js","sourcesContent":["export const getRandomJoke = async () => {\r\n  return await fetch('https://api.chucknorris.io/jokes/random').then(response => response.json())\r\n}\r\n\r\nexport const searchByText = async (text) => {\r\n  return await fetch(`https://api.chucknorris.io/jokes/search?query=${text}`).then(response => response.json())\r\n}\r\n\r\nexport const searchByCategory = async (text) => {\r\n  return await fetch(`https://api.chucknorris.io/jokes/random?category=${text}`).then(response => response.json())\r\n}\r\n\r\n\r\nexport const getCategories = async () => {\r\n  return await fetch('https://api.chucknorris.io/jokes/categories').then(response => response.json())\r\n}","import { Button, Input, FormControl, FormLabel } from '@chakra-ui/react';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { getCategories, searchByCategory, searchByText } from '../Services/fetch';\r\nimport { Select } from \"@chakra-ui/react\"\r\n\r\nconst FormJoke = (props) => {\r\n    const [text, setText] = useState('');\r\n    const [mode, setMode] = useState(true); \r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    const search = async () => {\r\n        let response;\r\n        if (mode){\r\n            response = await searchByText(text); \r\n        }else{\r\n            response = await searchByCategory(text);\r\n        }\r\n        props.setJoke(response); \r\n        console.log(response); \r\n    }\r\n\r\n    useEffect(()=> {\r\n        init(); \r\n    }, [])\r\n\r\n    const init = async () =>{\r\n        const response = await getCategories(); \r\n        console.log(response);\r\n        setCategories(response);\r\n        \r\n    }\r\n\r\n    \r\n    return(\r\n        <>\r\n        {mode? \r\n            (<Input m={4} onChange={ (e) => setText(e.target.value)} placeholder=\"Words to query\"/>):\r\n            (\r\n                <Select m={4} onChange={(e)=> setText(e.target.value)} placeholder=\"Select option\">\r\n                {    \r\n                 categories.map(element => (\r\n                    <option value={element}>{element}</option>\r\n                    )) \r\n                }    \r\n                </Select>\r\n            )\r\n        }\r\n        <Button m={2} colorScheme=\"blue\" onClick={search}>Search</Button>\r\n        <Button m={2} onClick={()=> setMode(!mode)}>Search by {!mode? ('Text'): ('Category')}</Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FormJoke; ","import React, {useEffect, useState} from 'react';\r\nimport {Box} from \"@chakra-ui/react\"\r\nimport {\r\n    Stat,\r\n    StatLabel,\r\n    StatNumber,\r\n    StatHelpText,\r\n  } from \"@chakra-ui/react\";\r\nconst Joke = (props) => {\r\n    return(\r\n        \r\n       \r\n            <Stat>\r\n            <StatNumber><img src={props.joke?.icon_url}/></StatNumber>\r\n            <StatLabel>{props.joke?.value}</StatLabel>\r\n            </Stat>               \r\n         \r\n    )\r\n}\r\n\r\nexport default Joke; ","import React, { useEffect, useState } from 'react';\r\nimport FormJoke from '../Components/FormJoke';\r\nimport Joke from '../Components/Joke';\r\nimport { getRandomJoke } from '../Services/fetch';\r\nimport { Center} from \"@chakra-ui/react\"\r\nconst JokesPage = () => {\r\n    const [joke, setJoke] = useState([]);\r\n    useEffect(()=> {\r\n        init();    \r\n    }, [])\r\n\r\n    const init = async () => {\r\n        const response = await getRandomJoke(); \r\n        setJoke(response);\r\n        console.log(response); \r\n    }\r\n    return(\r\n        <>\r\n        <Center style={{fontSize:\"2em\"}}>Chuck Norris Jokes App</Center>\r\n        <FormJoke  setJoke={setJoke}/>\r\n        {joke!=[] &&\r\n        \r\n            joke.result ?  \r\n            (\r\n                joke.result.map((elemento)=> (\r\n                    <Joke joke={elemento} />\r\n                ))\r\n            ):\r\n            (\r\n                <Joke joke={joke}/>\r\n            )                       \r\n        }   \r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default JokesPage; ","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport JokesPage from './Pages/JokesPage';\nimport { Container } from \"@chakra-ui/react\"\nimport './App.css';\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Container>\n      <Box fontSize=\"xl\">\n        <Grid p={3}>\n           <JokesPage/>\n        </Grid>\n      </Box>\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}